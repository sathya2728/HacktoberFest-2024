//code modified
import heapq
from typing import List, Optional


class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:

        dummy = ListNode(0)
        curr = dummy
        heap = []

      
        for i, lst in enumerate(lists):
            if lst:
                heapq.heappush(heap, (lst.val, i, lst))

        # Merge the lists using the heap
        while heap:
           
            _, i, minNode = heapq.heappop(heap)
            curr.next = minNode
            curr = curr.next  

           
            if minNode.next:
                heapq.heappush(heap, (minNode.next.val, i, minNode.next))

        return dummy.next  # Return the merged list, which starts after the dummy node
